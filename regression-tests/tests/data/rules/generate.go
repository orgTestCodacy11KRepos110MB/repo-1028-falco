//go:build ignore
// +build ignore

package main

import (
	"io"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"
	"text/template"
	"time"

	"github.com/iancoleman/strcase"
)

type headerInfo struct {
	Timestamp time.Time
	Package   string
}

type ruleInfo struct {
	VarName     string
	FileName    string
	FileContent string
}

var headerTemplate = template.Must(template.New("header").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at {{ .Timestamp }}

package {{ .Package }}

import (
	"github.com/falcosecurity/falco/regression-tests/pkg/utils"
)
`))

var ruleTemplate = template.Must(template.New("rule").Parse(`
var {{ .VarName }} = utils.NewStringFileAccessor("{{ .FileName }}", ` + "`" + `{{ .FileContent }}` + "`)\n"))

func die(err error) {
	if err != nil {
		log.Fatal(err.Error())
	}
}

func genDirectoryRules(w io.Writer, dirPath, namePath string) {
	files, err := ioutil.ReadDir(dirPath)
	die(err)
	for _, file := range files {
		fname := dirPath + file.Name()
		vname := namePath + file.Name()

		if file.IsDir() {
			genDirectoryRules(w, fname+"/", dirPath+fname+"_")
			continue
		}

		ext := path.Ext(file.Name())
		if ext != ".yaml" {
			continue
		}

		data, err := os.ReadFile(fname)
		die(err)
		ruleTemplate.Execute(w, ruleInfo{
			VarName:     strcase.ToCamel(strings.TrimSuffix(path.Base(vname), ext)),
			FileName:    path.Base(file.Name()),
			FileContent: string(data),
		})
	}
}

func main() {
	out, err := os.Create("rules_gen.go")
	die(err)
	defer out.Close()

	headerTemplate.Execute(out, headerInfo{
		Timestamp: time.Now(),
		Package:   "rules",
	})

	genDirectoryRules(out, "./files/", "")
}
